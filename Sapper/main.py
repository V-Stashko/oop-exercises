from random import randint

class Validator:
    """
    –ö–ª–∞—Å—Å-–¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞ Cell.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã:
    - is_mine: bool
    - number: int (–æ—Ç 0 –¥–æ 8)
    - is_open: bool
    """

    def __set_name__(self, owner: type, name: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–º—è –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
        self.name = f"_{owner.__name__}__{name}"

    def __get__(self, instance: object, owner: type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞."""
        if instance is None: 
            return property()
        return getattr(instance, self.name)

    def veification(self, value: object) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å."""
        if self.name.endswith(('is_mine', 'is_open')):
            return isinstance(value, bool)
        elif self.name.endswith('number'):
            return isinstance(value, int) and 0 <= value <= 8
        raise TypeError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è")

    def __set__(self, instance: object, value: object) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""
        if not self.veification(value):
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞")
        setattr(instance, self.name, value)


class Cell:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–ª–µ—Ç–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
    –ê—Ç—Ä–∏–±—É—Ç—ã:
    - is_mine (bool): –°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–ª–µ—Ç–∫–∞ –º–∏–Ω—É.
    - number (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–ª–µ—Ç–∫–∏ (–æ—Ç 0 –¥–æ 8).
    - is_open (bool): –û—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞.
    """
    is_mine = Validator()
    number = Validator()
    is_open = Validator()

    def __init__(self) -> None:
        self.is_mine = False
        self.number = 0
        self.is_open = False

    def __bool__(self) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞."""
        return not self.is_open


class GamePole:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è "–°–∞–ø–µ—Ä–∞".
    –ê—Ç—Ä–∏–±—É—Ç—ã:
    - M (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
    - N (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
    - total_mines (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –Ω–∞ –ø–æ–ª–µ.
    """
    __instance = None
    __is_exist = False

    def __new__(cls, *args, **kwargs):
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Singleton –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è."""
        if cls.__instance is None:
            cls.__instance = super().__new__(cls)
        return cls.__instance

    def __init__(self, M: int, N: int, total_mines: int) -> None:
        if not self.__is_exist:
            self.M = M
            self.N = N
            self.total_mines = total_mines
            self.__pole_cells = [[Cell() for _ in range(self.N)] for _ in range(self.M)]
            GamePole.__is_exist = True

    @property
    def pole(self) -> list[list[Cell]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è."""
        return self.__pole_cells

    def __create_mines(self) -> set[tuple[int, int]]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω –Ω–∞ –ø–æ–ª–µ."""
        mines = set()
        while len(mines) != self.total_mines:
            mines.add((randint(0, self.M - 1), randint(0, self.N - 1)))
        return mines

    def __add_around_mines(self, i: int, j: int) -> None:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ number —É –∫–ª–µ—Ç–æ–∫ –≤–æ–∫—Ä—É–≥ –º–∏–Ω—ã."""
        directions = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1),         (0, 1),
            (1, -1), (1, 0), (1, 1)
        ]

        for di, dj in directions:
            ni, nj = i + di, j + dj
            if 0 <= ni < self.M and 0 <= nj < self.N:
                self.pole[ni][nj].number += 1

    def init_pole(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –º–∏–Ω–∞–º–∏ –∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏."""
        mines = self.__create_mines()
        for i, j in mines:
            self.pole[i][j].is_mine = True
            self.__add_around_mines(i, j)

    def open_cell(self, i: int, j: int) -> None:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–µ—Ç–∫—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º."""
        if not (0 <= i < self.M and 0 <= j < self.N):
            raise IndexError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã i, j –∫–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è')
        self.pole[i][j].is_open = True

    def show_pole(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ –∫–æ–Ω—Å–æ–ª—å."""
        bomb = "üí£"
        blue_square = "üî∂"
        numbers = {
            0: "0Ô∏è‚É£", 1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 
            3: "3Ô∏è‚É£", 4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£", 
            6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£"
        }

        for row in self.pole:
            row_display = []
            for cell in row:
                if cell.is_open:
                    if cell.is_mine:
                        row_display.append(bomb)
                    else:
                        row_display.append(numbers[cell.number])
                else:
                    row_display.append(blue_square)
            print("".join(row_display))


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
pole = GamePole(10, 20, 10)  # —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–ª–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏ 10x20 —Å –æ–±—â–∏–º —á–∏—Å–ª–æ–º –º–∏–Ω 10
pole.init_pole()
if pole.pole[0][1]:
    pole.open_cell(0, 1)
if pole.pole[3][5]:
    pole.open_cell(3, 5)

try:
    pole.open_cell(30, 100)  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ IndexError
except IndexError as e:
    print(e)

pole.show_pole()
